{
  "scopeName": "source.m",
  "name": "M DGFiP",
  "fileTypes": [
    "m"
  ],
  "patterns": [
    {
      "match": "\\bvariable\\s+(saisie|calculee)\\b",
      "vim_name": "structKeywords",
      "name": "entity.name.type.m"
    },
    {
      "match": "\\bdomaine\\s+(regle|verif)\\b",
      "vim_name": "structKeywords",
      "name": "entity.name.type.m"
    },
    {
      "match": "\\b(regle|verif|cible)\\b",
      "name": "entity.name.type.m"
    },
    {
      "match": "\\bcalculer\\s+(domaine|enchaineur|cible)\\b",
      "vim_name": "basicKeywords",
      "name": "keyword.other.m"
    },
    {
      "match": "\\bverifier\\s+domaine\\b",
      "vim_name": "basicKeywords",
      "name": "keyword.other.m"
    },
    {
      "match": "\\:|\\(|\\)|\\,|\\;",
      "vim_name": "basicKeywords",
      "name": "keyword.other.m"
    },
    {
      "match": "\\bvariable\\s+temporaire\\b",
      "vim_name": "basicKeywords",
      "name": "keyword.other.m"
    },
    {
      "match": "\\b(application|enchaineur|tableau|attribut|specialise)\\b",
      "vim_name": "basicKeywords",
      "name": "keyword.other.m"
    },
    {
      "match": "\\b(autorise|par_defaut|calculable|verifiable|saisie)\\b",
      "vim_name": "basicKeywords",
      "name": "keyword.other.m"
    },
    {
      "match": "\\b(calculee|alias|base|restituee|type|fonction|const)\\b",
      "vim_name": "basicKeywords",
      "name": "keyword.other.m"
    },
    {
      "match": "\\b(sortie|condition|erreur|afficher|afficher_erreur)\\b",
      "vim_name": "basicKeywords",
      "name": "keyword.other.m"
    },
    {
      "match": "\\b(leve_erreur|nettoie_erreurs|finalise_erreurs|exporte_erreurs)\\b",
      "vim_name": "basicKeywords",
      "name": "keyword.other.m"
    },
    {
      "match": "\\b(si|alors|sinon|sinon_si|finsi)\\b",
      "vim_name": "controlKeywords",
      "name": "keyword.control.m"
    },
    {
      "match": "\\b(pour|un|iterer|avec|restaurer|apres|categorie)\\b",
      "vim_name": "controlKeywords",
      "name": "keyword.control.m"
    },
    {
      "match": ":\\s*variable",
      "vim_name": "controlKeywords",
      "name": "keyword.control.m"
    },
    {
      "begin": "\\\"",
      "end": "\\\"",
      "vim_name": "strings",
      "name": "string.quoted.double.m"
    },
    {
      "match": "^\\s*([A-Z_a-z_0-9]+)[A-Z_a-z]([A-Z_a-z_0-9]*)\\s*\\=aaaaaaaaaaaaaaaaaaaaaaaaaa",
      "comment": "deactivated because of conflicts with equality test",
      "vim_name": "assignment",
      "name": "entity.name.type.m"
    },
    {
      "match": "^\\s*([A-Z_a-z_0-9]*)[A-Z]([A-Z_a-z_0-9]*)\\s*\\:",
      "vim_name": "declaration",
      "name": "entity.name.type.m"
    },
    {
      "match": "\\b([0-9]+)(\\(\\.[0-9]+\\))?\\b",
      "vim_name": "numericConstant",
      "name": "constant.numeric.m"
    },
    {
      "match": "\\bindefini\\b",
      "vim_name": "numericConstant",
      "name": "constant.numeric.m"
    },
    {
      "match": "\\b(somme|abs|min|max|positif|positif_ou_nul|null|arr|inf)\\b",
      "vim_name": "functions",
      "name": "entity.name.function.m"
    },
    {
      "match": "\\b(supzero|present|multimax|modulo|nb_anomalies)\\b",
      "vim_name": "functions",
      "name": "entity.name.function.m"
    },
    {
      "match": "\\b(nb_discordances|nb_informatives|nb_bloquantes)\\b",
      "vim_name": "functions",
      "name": "entity.name.function.m"
    },
    {
      "match": "\\b(nb_categorie|numero_compl|numero_verif|taille)\\b",
      "vim_name": "functions",
      "name": "entity.name.function.m"
    },
    {
      "vim_name": "comments",
      "name": "comment.line.m",
      "begin": "#",
      "end": "$"
    },
    {
      "name": "comment.block.m",
      "vim_name": "comments",
      "begin": "#\\{",
      "end": "\\}#"
    },
    {
      "match": "\\b(\\+|\\-|\\*|\\|\\=|!\\=|\\>|\\<|\\>\\=|\\<\\=|et|ou|non|dans)\\b",
      "vim_name": "operators",
      "name": "keyword.operator.m"
    },
    {
      "match": "\\b([A-Z0-9]*)[A-Z]([A-Z0-9_]*)\\b",
      "vim_name": "operators",
      "name": "entity.name.variable.m"
    }
  ]
}